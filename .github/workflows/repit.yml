name: Spring Boot CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ① 러너의 공인 IP 추출
      - id: ip
        name: Get runner public IP
        run: echo "ipv4=$(curl -s https://checkip.amazonaws.com)" >> $GITHUB_OUTPUT

      # ② SSH 허용 규칙 추가
      - name: Authorize SSH from runner
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --protocol tcp --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 || true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2

      # 소스코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      # Gradle 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build

      # Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t spring-extension .

      # DockerHub 로그인
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # DockerHub에 이미지 푸시
      - name: Push Docker image
        run: |
          docker tag spring-extension ${{ secrets.DOCKER_USERNAME }}/spring-extension:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-extension:latest

      # EC2에 SSH 접속 후 Docker 컨테이너 실행
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-extension:latest
            docker stop spring-extension-container || true
            docker rm spring-extension-container || true
            docker run -d -p 80:8080 --name spring-extension-container ${{ secrets.DOCKER_USERNAME }}/spring-extension:latest

      # ③ SSH 허용 규칙 해제
      - name: Revoke SSH rule
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --protocol tcp --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 || true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2
